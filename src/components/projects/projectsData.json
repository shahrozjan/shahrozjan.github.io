[
    {
      "name": "TonDone Cross Platform Mobile App",
      "description": "As part of the TonDone project, I was responsible for developing a range of REST APIs with a MariaDB backend. These APIs were designed to handle a large user base, efficiently serving thousands of users across the mobile app. I played a key role in creating new features for the app, such as the 'Create New Work Order Page' and 'Quick Actions Page'. Both features were developed using XAML for the front end, while the backend was powered by the REST APIs I had built. This project also involved refactoring parts of the app for better performance and maintainability in Xamarin and MAUI.",
      "tags": ["C#", ".NET Core", "Xamarin", "MAUI", "XAML", "MVC"],
      "date": "July 2023",
      "image":"tondone.png"
    },
    {
      "name": "B+ Tree Implementation",
      "description": "For this project, I designed and implemented a B+ Tree data structure as part of a larger database management system (DBMS) assignment. The B+ Tree was optimized to ensure efficient data insertion, deletion, and retrieval operations, balancing the branching factor to maintain tree height and performance. I carefully tuned the B+ Tree to work effectively under different data loads and ensured that it performed optimally at various fanouts, improving query performance in the database. The implementation was completed using C++ and leveraged advanced object-oriented design principles.",
      "tags": ["C++", "Data Structures", "DBMS"],
      "date": "December 2022",
      "image":"bplus_trees.jpg"
    },
    {
      "name": "SignalR-GRPC Message Reader",
      "description": "In this project, I developed both the front end and backend for a highly scalable .NET Core message reader and sender system. The system was designed to handle multiple devices concurrently by utilizing SignalR for a persistent connection, enabling real-time messaging between devices. I integrated the system with GRPC for high-performance communication, allowing it to read and send messages across several devices in real-time. This project was crucial for scaling device communication and provided a reliable platform for handling large volumes of data from IoT devices.",
      "tags": ["C#", ".NET Core", "SignalR", "GRPC", "IoTHub"],
      "date": "January 2021",
      "image":"resideo_logo.jpg"
    },
    {
      "name": "Mass Device Simulator",
      "description": "I developed a Mass Device Simulator capable of running a large number of virtual devices, each sending and receiving messages to and from the cloud using IoTHub. This project was built using the .NET Framework and utilized a modular approach to manage the complex interactions between devices. The simulator was deployed in a Docker environment, enabling it to handle thousands of simultaneous device connections. It significantly improved the testing process for IoT devices by simulating real-world scenarios in a controlled cloud environment, making it easier to detect and fix issues before deployment.",
      "tags": [".NET Framework", "REST", "SHELL", "SQL", "IoTHub", "Docker", "Azure", "LINQ", "MVC"],
      "date": "May 2020",
      "image":"resideo_logo.jpg"
    },
    {
      "name": "Mass Device Registration and Data Generation",
      "description": "This project involved automating the registration and data generation for a large number of devices. I developed a .NET Core application that could register up to 100,000 devices across multiple databases in a single day, a significant improvement over the previous manual process that took several months. Additionally, the application could generate vast amounts of device data in seconds, which was used for testing and simulation purposes. This project required deep knowledge of parallel and asynchronous programming in C#, as well as advanced SQL techniques to handle the large volume of data efficiently.",
      "tags": ["C#", ".NET Core", "IoTHub", "SQL", "Automation"],
      "date": "December 2019",
      "image":"resideo_logo.jpg"
    }
  ]
  